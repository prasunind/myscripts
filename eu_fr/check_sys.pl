#!/usr/bin/perl

use Getopt::Std;
use File::Basename;
use Time::Local;

getopts ('dsamE:');

$set_env = "/data/centraol/admin/channel_env.sh";
$cert_env = "/data/certs/cert_env.lis";
$week_limit = 5;
$flag = "OK";

$progname = basename($0);

%exceptions =  (
        'neufportail.aol.fr' => 'www.neufportail.fr', 
        'cegetelportail.aol.fr' => 'www.cegetelportail.fr', 
        'blogshopping.aol.fr' => 'guide-shopping.aol.fr'
        );

$user = "jv-fr01";
# Check the user is root
open(ID,"id |");
$uid = <ID>;
($uid,$gid) = split(" ",$uid);
$gid = "not used";
if ($uid ne "uid=114(jv-fr01)") {
	if ($opt_s) {
		print "KO\n";
	} else {
        	print "Sorry user must be $user, at present : $uid\n";
	}
        exit 1;
}
close(ID);

$usage = <<End_of_USAGE;

Usage: $progname [-a|-E server_aol_fr]
  -E   environment name (for example foot_aol_fr)
  -m   mail the output
  -s   run in silent mode (just produce a OK or KO)
  -d   debug mode
  -a   search all environments

End_of_USAGE

if ($opt_a) {
   @env_list = &get_all_envs;
} elsif ($opt_E) {
    chomp $opt_E;
    push (@env_list,$opt_E);
} else {
    print STDERR $usage;
    exit 1;
}

if ($opt_m) {
	$log_file = "expiry.out";
	open(STDOUT,">$log_file");
	$mail_flag = "true";
	$mailer = "/bin/mailx -s";
	$mailaddress = "david.pattenden\@corp.aol.com";
#	$mailaddress = "exploit-fr\@LISTSERV.SUP.AOL.COM";
}

### COLLECT ENVIRONMENT INFO
foreach $env (@env_list) {
	open(IN,$set_env);
	while ($raw = <IN>) {
        	chomp $raw;
        	if ($raw =~ /^$env/)  {
                	$REMOTE_CATALINA_USER = "true";
                	$SERVER_LIST = "true";
                	next;
        	}       
        	if ($REMOTE_CATALINA_USER eq "true") {
                	$REMOTE_CATALINA_USER = $raw;
                	next;
        	}
        if ($SERVER_LIST eq "true") {
                $SERVER_LIST = $raw; 
                	last;              
        	}
	} unless ($REMOTE_CATALINA_USER || $SERVER_LIST) { 
		if ($opt_s) { 
			print "KO\n"; 
		} else { print "Environment not found\n"; }
		exit 1; 
	}
	$REMOTE_CATALINA_USER =~ s/ //g; 
	@scuser = split("=",$REMOTE_CATALINA_USER);
	$REMOTE_CATALINA_USER = $scuser[1];
	@sslist = split("=",$SERVER_LIST);
	$SERVER_LIST = $sslist[1]; 
	$SERVER_LIST =~ s/\"//g;
	@servers = split(" ",$SERVER_LIST);
	$env =~ s/_/./g;
	unless ($opt_s) { 
		print "****** $env ******\n";
		print "$REMOTE_CATALINA_USER\n";
	}
	foreach $server (@servers) { 
		unless ($opt_s) { print "$server\n"; }
		$dis = &display_dates("CERT_FILE");
		if ($dis eq "unable to find" ) {
			$dis = &go_hunting_location($env,$server); 
			unless ($opt_s) { print "CERT_FILE : $dis\n"; }
			if ($dis eq "unable to find") {
				$flag = "KO"; 
			} else {
				&check_date;
				next;
			}
		} else { 
			unless ($opt_s) { print "CERT_FILE : $dis\n"; }
			&check_date; 
		}
                $dis = &display_dates("CA_FILE");             
                unless ($opt_s) { print "CA_FILE : $dis\n"; }
		if ($dis eq "unable to find" ) {
			$flag = "KO";
		} else { &check_date; }
	}
	unless ($opt_s) { print "\n"; }
}

if ($opt_m) { if ($mail_flag ne "true") { close (MAIL); } }
if ($opt_s) { print "$opt_E : Certificates $flag\n"; }
	exit 0;

sub check_date {
        @date = &convert_date($dis);
        @cc = compare_date($date[0],$date[1],$date[2]);
        if ($cc[0] < 0) {
	        unless ($opt_s) { print "Certificate has expired!\n"; }
		if ($opt_m) { mail_print ("$loc on $server has expired ($dis) for $env\n"); }
		$flag = "KO";
       	} elsif ($cc[1] < $week_limit) {
       		unless ($opt_s) { print "Certificate will expire in $cc[1] weeks\n"; }
		if ($opt_m) { mail_print ("$loc on $server will expire in $cc[1] weeks ($dis) for $env)\n"); }
		$flag = "KO";
	}
}

sub mail_print {
	if ($mail_flag eq "true") {
		$mail_flag = "false";
		open MAIL, "| $mailer \"Certificate Expiry Warning\" $mailaddress" or die "Can't open $mailer: $!\n";
		print MAIL "This email has been automatically generated by the script $progname on frops.fr.office.aol.com\n";
		print MAIL "For more information please run manually $progname -a\n";
		print MAIL "Warnings will only be generated if the certificate will expire in the next $week_limit weeks, or has already expired.\n\n";
	}
	print MAIL "$_[0]";
}

sub convert_date {
	my @sdate;
	my $count = 0;
	@sdate = split(" ",$_[0]);
	$month = $sdate[0];
	$day = $sdate[1];
	$year = $sdate[3];
	my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
	foreach $m (@months) {
		$count++;
		if ($month eq $m) {
			$month_num = $count;
		}
	}
	return($day,$month_num-1,$year);
}

sub compare_date {
	my $now = time();
	my $then = timegm(0,0,0,$_[0],$_[1],$_[2]);
	my $diff = $then -$now;
	my @tsplit = splittime($diff,60,60,24,7);
	return ($diff,$tsplit[4],$tsplit[3]);
}

sub treport {
	my ($text,$timing) = @_;
	($sec,$min,$hour,          # second, minute, hour
 	$mday,$month,$year,       # day of month, month
		# (0-11), year
 	$wday,$yday,$dst) =       # day of week, day of
		# year, daylight
 	gmtime($timing);
	printf (
 	"%s %d/%d/%d %02d:%02d\n"
 	,$text,$mday,$month+1,$year+1900,
 	$hour,$min);
}
	
sub splittime {
	my ($val,@list) = @_;
	my @rv;
	$val = abs($val);
	foreach $factor (@list){
 		push @rv,$val%$factor;
 		$val/=$factor;
 	}
	push @rv,int($val);
	return @rv;
}

sub display_dates {
	$loc = &get_location("$server","$env","$_[0]");
       	if ($loc) {                                                                                                            
        	$outcome = &get_expiry("$server","$loc");                                                                      
        	return ($outcome);                                                                                
        } else {                                                                                                               
        	return ("unable to find");                                                                          
        }                                                                                                                      
}

	
sub get_expiry {
        my $server = $_[0];
	my $command = "openssl x509 -issuer -email -dates -in ";
	my $cert_file = $_[1];
        $expiry_date = `ssh -q $user\@$server \"$command $cert_file\" | grep notAfter`;
	chomp ($expiry_date);
        @sexpiry_date = split("=",$expiry_date);
        return $sexpiry_date[1];
}

sub get_location {
        my $server = $_[0];
	#my $env = $_[1];
	my $cert_type = $_[2];
	my $rspd_conf = "/data/rsp/conf/rspd_post.tcl";
        my $env = &check_exceptions($_[1]);
	my $command = "grep $cert_type $rspd_conf | grep $env";
	if ($opt_d) { print "ssh -q $user\@$server \"$command\"\n"; }
	$location = `ssh -q $user\@$server \"$command\"`;
	chomp ($location);
	@slocation = split(" ",$location);
	return ($slocation[4]);
}

sub get_all_envs {
	my @server_list;
        open(ENV,$cert_env);
	while ($env = <ENV>) {
		chomp $env;
		push (@server_list,$env);
	}
	return (@server_list);
}

sub go_hunting_location {
        my $server = $_[1];
	my $myenv = $_[0];
	$myenv =~ s/\./_/g;
	my $command = "grep SSLCertificateFile /data/servers/$myenv/config/httpd.conf";
	my $location = `ssh -q $user\@$server \"$command\"`;
	chomp ($location);
        my @slocation = split(" ",$location);
        if ($slocation[1]) {
                $outcome = &get_expiry("$server","$slocation[1]");
                return ($outcome);
        } else {
                return ("unable to find");
        } 

}

sub check_exceptions {
        my $env = $_[0];
        foreach $cle (keys (%exceptions)) {
                if ($env eq $cle) {
                        return($exceptions{$cle});
                }
        }
        return($env);
}

